import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState, AppThunk } from '../../app/store'

import { RGBColorType } from '../../types'

export type AdjustmentAction = {
  type: 'ADJUST_RED' | 'ADJUST_GREEN' | 'ADJUST_BLUE'
  payload: number
}

const initialState: RGBColorType = {
  red: 0,
  green: 0,
  blue: 0,
}

export const rgbSlice = createSlice({
  name: 'rgb',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    adjust_red: (state, action: PayloadAction<number>) => {
      state.red = action.payload
    },
    adjust_green: (state, action: PayloadAction<number>) => {
      state.green = action.payload
    },
    adjust_blue: (state, action: PayloadAction<number>) => {
      state.blue = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
})

export const { adjust_red, adjust_green, adjust_blue } = rgbSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default rgbSlice.reducer

export const reducer = (
  state: RGBColorType,
  action: AdjustmentAction
): RGBColorType => {
  if (action.type === 'ADJUST_RED') {
    return { ...state, red: action.payload }
  }

  if (action.type === 'ADJUST_GREEN') {
    return { ...state, green: action.payload }
  }

  if (action.type === 'ADJUST_BLUE') {
    return { ...state, blue: action.payload }
  }

  return state
}
